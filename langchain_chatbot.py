# -*- coding: utf-8 -*-
"""Langchain_chatbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y4vFsMW9H7B17Rp4SfAP23PehO0te7dD
"""

!pip install python-dotenv==1.0.0
!pip install langchain==0.0.137
!pip install pinecone-client==2.2.1

!pip install PyPDF2

!pip install openai

!pip install tiktoken

!pip install faiss-cpu

import os
os.environ['OPENAI_API_KEY'] = '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'

from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter

from langchain.document_loaders import DirectoryLoader

from langchain.document_loaders import TextLoader

!pip install pypdf

!pip install --upgrade langchain

from google.colab import drive
drive.mount('/content/drive')

# chapter_1 = "/content/drive/MyDrive/AOMSI_book/64.pdf"
# chapter_2 = "/content/drive/MyDrive/AOMSI_book/65.pdf"
folder = "/content/drive/MyDrive/AOMSI_book"
# chapters = os.listdir(folder)

# To load multiple PDF files in Python, you can use the PyPDF2 library. PyPDF2 is a popular library for working with PDF files. Before using it, make sure you have it installed by running:


# Here's an example of how to load multiple PDF files and extract text from each of them:

# pyth
# code
import os
import PyPDF2

def extract_text_from_pdf(pdf_path):
    text = ""
    with open(pdf_path, "rb") as file:
        pdf_File_Object = file

    # Here, we will creat a pdf reader object
        pdf_Reader = PyPDF2.PdfReader(pdf_File_Object)

    # Now we will print number of pages in pdf file
        print("No. of pages in the given PDF file: ", len(pdf_Reader.pages))
        num_pages = len(pdf_Reader.pages)
        for j in range(num_pages):
    # Here, create a page object
          page_Object = pdf_Reader.pages[j]

    # Now, we will extract text from page
          text = text + page_Object.extract_text()

    # At last, close the pdf file object
        pdf_File_Object.close()



    return text

def load_multiple_pdfs(folder_path):
    pdf_texts = {}
    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            pdf_path = os.path.join(folder_path, filename)
            pdf_texts[filename] = extract_text_from_pdf(pdf_path)
    return pdf_texts

if __name__ == "__main__":
    # folder_path = "path/to/your/folder"  # Replace with the path to your folder containing the PDF files
    pdf_texts = load_multiple_pdfs(folder)

pdf_texts.keys()

raw_text=""
for i in pdf_texts.keys():
  raw_text = raw_text + pdf_texts[i]

raw_text

import PyPDF2 as PDF
raw_text=""
chapters = [chapter_1, chapter_2]
# Here we will create a pdf file object
for i in range(len(chapters)):
  pdf_File_Object = open(chapters[i], 'rb')

    # Here, we will creat a pdf reader object
  pdf_Reader = PDF.PdfReader(pdf_File_Object)

    # Now we will print number of pages in pdf file
  print("No. of pages in the given PDF file: ", len(pdf_Reader.pages))
  num_pages = len(pdf_Reader.pages)
  for j in range(num_pages):
    # Here, create a page object
    page_Object = pdf_Reader.pages[j]

    # Now, we will extract text from page
    raw_text = raw_text + page_Object.extract_text()

    # At last, close the pdf file object
  pdf_File_Object.close()

# raw_text

from langchain.chains import  RetrievalQA

from langchain.vectorstores import FAISS

from langchain.llms import OpenAI

text_splitter = CharacterTextSplitter(
    separator = "\n",
    chunk_size = 1000,
    chunk_overlap  = 200, #striding over the text
    length_function = len,
)
texts = text_splitter.split_text(raw_text)

# Download embeddings from OpenAI
embeddings = OpenAIEmbeddings()

docsearch = FAISS.from_texts(texts, embeddings)

# query = "What is Chronic Recurrent Dislocation?"
# docs = docsearch.similarity_search(query)

# docs[0]

chat = OpenAI(model_name="gpt-3.5-turbo",temperature=0.3)

retriever = docsearch.as_retriever(search_type="similarity", search_kwargs={"k":4})

chain = RetrievalQA.from_llm(llm = chat, retriever=retriever)

# chain({"query" : "What is Chronic Recurrent Dislocation?"})

while True:
    user_input = input("You: ")  # Get user input
    if user_input.lower() in ["exit", "quit", "bye"]:
        print("Chatbot: Goodbye!")
        break  # Exit the loop if the user wants to end the conversation
    else:
        response = chain({"query" : user_input})
        print("Chatbot:", response['result'])

from langchain.chains.conversation.memory import ConversationBufferMemory
from langchain import OpenAI
from langchain.chains import ConversationChain

# memory = ConversationBufferMemory()
# conversation = ConversationChain(
#     llm=chat,
#     verbose=True,
#     memory=memory
# )

# conversation.predict(input="Hi there! I am Sam")
def get_response(user_input):
    # while True:
    #     user_input = input("You: ")  # Get user input
    if user_input.lower() in ["exit", "quit", "bye"]:
        response =  "Goodbye!"
        break  # Exit the loop if the user wants to end the conversation
    else:
        response = chat.predict(input=user_input)
    return response

# print(conversation.memory.buffer)

